Key: - todo, + done, o pending, ! attention, x ignore

+ swc-check: detect soma nodes (type 1) separated by other nodes (see  Ilaria's 210525_s6_v4.swc)
+ swc-repair: assumes centered input morphology; should do this internally if needed and return original root coordinates unless -n explicitly applied
+ swc-repair: centering -n not applied after shrinkage correction
+ swc-repair: add --seed for reproducible results
+ swc-view: color options
+ swc-measure: add optional features (-a {sholl,dist,path,sec})
+ swc-find: distance to origin
+ swc-repair: add neurite to root if id=1 is in the list of the cut points
! swc-view: run gdk-pixbuf-register to enable matplotlib backends
+ morph (get_segdata): extract extended segment data (two-pass parsing)
+ swc-view: add dendrogram view
+ swc-view: add axes limits
+ swc-modify: scaling with positive factors only
+ swc-repair: add flip option (-f {x,y,z}); flip around root, not origin
+ swc-find: change distance-to-origin to distance-to-root
+ swc-measure (Node.dist): evaluate distance to root, not origin
+ swc-measure: rewrite for parallel execution (see experimental swc-meter)
+ swc-measure: make dist a standard feature (-a dist)
+ swc-measure: add segment data option (-a seg) (see morph.py:get_segdata()), remove exp swc-meter
+ treem: add scripts/swc2pts.py
+ treem: release v1.1.0
+ swc-view: distance to object setting is ignored (-d) if 'ortho' projection is used (default)
+ swc-measure: wrong values of segment order (-a seg) limited to 1 and 2
+ swc-modify: swap 2 nodes at a time, randomly selected from the input list
! swc-render: 'no valid context' error in wayland, set PYOPENGL_PLATFORM='glx'
+ swc-render (W, write image to file): TypeError
+ treem: release v1.1.1
o treem: refactor code to resolve SonarQube issues
+ treem: replace legacy setup.py bdist_wheel mechanism with pyproject.toml
+ treem: run tests with 'hatch run pytest ...' command
+ treem: use tox to test against several python versions and os platforms
+ treem: cleanup tox/hatch configs
- treem (tests): revise coverage of cli code, import command directly instead of calling it with subprocess.Popen():

import sys
import pytest
from unittest.mock import patch
from cli import cli # Import the cli() function directly

# Fixture to create a dummy file for the 'check' command to operate on
@pytest.fixture
def dummy_swc_file(tmp_path):
    """Creates a minimal dummy SWC file for testing."""
    file_content = "1 1 0 0 0 1 -1\n" # A single root node
    f = tmp_path / "dummy.swc"
    f.write_text(file_content)
    return str(f)

# We use @patch as a decorator to replace the 'check' and 'sys.exit' functions.
# The patch target needs to be where the function is looked up, which is 'cli'.
@patch('cli.sys.exit')
@patch('cli.check')
def test_cli_check_command(mock_check, mock_sys_exit, dummy_swc_file):
    """
    Tests the 'swc check <file>' command by simulating command-line input
    and mocking the underlying functions.
    """
    # --- Setup ---
    # 1. Configure the mocked 'check' function
    #    The 'check' command returns the number of errors, which is used as the exit code.
    mock_check.return_value = 0 # 0 errors = successful run

    # 2. Simulate the command-line arguments: 'swc check dummy.swc'
    # We save the original sys.argv and restore it later for cleanup
    original_argv = sys.argv[:]
    sys.argv = ['swc', 'check', dummy_swc_file]

    # --- Execution ---
    try:
        cli()
    finally:
        # --- Cleanup ---
        # Restore sys.argv whether the test passes or fails
        sys.argv = original_argv

    # --- Assertions ---
    
    # 1. Assert that the 'check' function was called 
    #    This proves the argument parsing was successful and directed to the right function.
    mock_check.assert_called_once()
    
    # 2. Inspect the arguments passed to the 'check' function
    #    The argument is the argparse Namespace object.
    call_args_namespace = mock_check.call_args[0][0]
    
    # Check that the 'file' attribute on the Namespace is the dummy file path
    assert call_args_namespace.file == dummy_swc_file
    
    # 3. Check that sys.exit was called with the return value of mock_check (0)
    mock_sys_exit.assert_called_once_with(0)
